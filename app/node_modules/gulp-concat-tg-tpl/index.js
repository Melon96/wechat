'use strict';
var through = require('through2');
var path = require('path');

var vfs = require('vinyl-fs');
var concat = require('gulp-concat');
var ejs2js = require('gulp-ejs-to-js');

var gutil = require('gulp-util');
var PluginError = gutil.PluginError;

// 常量
const PLUGIN_NAME = 'gulp-concat-tg-tpl';
/**
 * 合并tg项目的模板
 * @param  {[type]} opt [description]
 * @return {[type]}     [description]
 */
module.exports = function(opt) {
    opt = opt || {
        minify: true
    };
    var srcPath = opt.srcPath || '';
    var basepath = opt.basepath || '';

    function doSomething(file, encoding, callback) {

        if (file.isNull()) {
            throw new PluginError(PLUGIN_NAME, 'file is not exist!');
        }

        if (file.isStream()) {
            throw new PluginError(PLUGIN_NAME, 'Streaming not supported!');
        }

        　　　　 //do something
        var fileName = '', 
            resolvePath = path.resolve(file.path),
            resolveBasePath = basepath ? path.resolve(basepath) : path.resolve('.');
        

        if (basepath && resolvePath.indexOf(resolveBasePath) !== -1) {
            fileName = resolvePath.substring(resolvePath.indexOf(resolveBasePath) + resolveBasePath.length, resolvePath.length);
        } else {
            fileName = path.basename(file.path);
        }
    
        var contents = file.contents.toString();
        var tplArr = [],
            tmp = contents.match(/getTemplate[^"']*["|'][^\.]*\.html["|']/g);

        if (tmp) {
            tmp.forEach(function(item) {
                var temp = /["|'](.*).html/.exec(item);
                if (temp && temp[1]) {
                    tplArr.push(srcPath + temp[1] + '.ejs');
                }
            });
            
            vfs.src(tplArr)
                .pipe(ejs2js({basepath: srcPath, prefix: '/invest', minify: true}))
                .pipe(concat(fileName))
                .pipe(through.obj(function(chunk) {
                    var concatBuf = typeof Buffer === 'function' ? new Buffer('\n') : Buffer.from('\n');
                    chunk.contents = Buffer.concat([file.contents, concatBuf, chunk.contents], file.contents.length + concatBuf.length + chunk.contents.length)
                    callback(null, chunk);
                }));
        } else {
            callback(null);
        }

    }

    return through.obj(doSomething);
};
